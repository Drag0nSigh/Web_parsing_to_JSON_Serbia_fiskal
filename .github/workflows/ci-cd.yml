name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Tests & Linting
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_fiscal_data
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Test environment variables
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: test_fiscal_data
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_fiscal_data
      TG_TOKEN: "123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      ADMIN_ID: "123456789"
      DAILY_REQUEST_LIMIT: "50"
      LOG_RETENTION_DAYS: "7"
      # ChromeDriver settings
      WDM_LOG_LEVEL: 0
      WDM_LOCAL: 1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Chrome
      run: |
        # Install Chrome only
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

        # Verify Chrome installation
        google-chrome --version

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        # Update webdriver-manager to latest version for new API support
        pip install --upgrade webdriver-manager

    - name: Auto-format code
      run: |
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        black --line-length=120 src/ tests/
        isort --profile=black --line-length=120 src/ tests/
        autoflake --in-place --remove-all-unused-imports --remove-duplicate-keys --remove-unused-variables --recursive src/ tests/

    - name: Run linting (relaxed)
      run: |
        # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ª–∏–Ω—Ç–∏–Ω–≥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        flake8 src/ tests/ \
          --max-line-length=1000 \
          --extend-ignore=E203,E402,E722,F841,F541,W291 \
          --exclude=migrations \
          --statistics
      continue-on-error: true

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'

    - name: Initialize database
      run: |
        cd src
        python -c "
        import os
        os.environ.update({
            'POSTGRES_HOST': 'localhost',
            'POSTGRES_PORT': '5432',
            'POSTGRES_DB': 'test_fiscal_data',
            'POSTGRES_USER': 'test_user',
            'POSTGRES_PASSWORD': 'test_password'
        })
        from db.database import db_manager
        db_manager.init_database()
        print('Database initialized successfully')
        "

    - name: Run tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          --tb=short

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy via SSH
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

          echo "üë§ Current user: $(whoami)"
          echo "üìÅ Preparing deployment..."
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          TEMP_DIR="/tmp/fiscal-parser-$(date +%s)"
          FINAL_DIR="/opt/fiscal-parser"
          
          echo "üìÇ Cloning repository to temporary directory..."
          git clone https://github.com/${{ github.repository }}.git "$TEMP_DIR"
          cd "$TEMP_DIR"
          git checkout main
          
          echo "üõë Stopping existing services and backing up .env..."
          # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ -d "$FINAL_DIR" ] && [ -f "$FINAL_DIR/.env" ]; then
            echo "üíæ Backing up existing .env file..."
            cp "$FINAL_DIR/.env" "/tmp/.env.backup"
          fi
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
          if [ -d "$FINAL_DIR" ]; then
            cd "$FINAL_DIR"
            docker-compose down --remove-orphans
            cd ..
          fi
          
          echo "üì¶ Moving new code to production directory..."
          # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
          if [ -d "$FINAL_DIR" ]; then
            rm -rf "$FINAL_DIR"/* "$FINAL_DIR"/.* 2>/dev/null || true
          fi
          
          # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          mv "$TEMP_DIR"/* "$FINAL_DIR"/ 2>/dev/null || true
          mv "$TEMP_DIR"/.* "$FINAL_DIR"/ 2>/dev/null || true
          rmdir "$TEMP_DIR" || true
          cd "$FINAL_DIR"
          
          # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
          if [ -f "/tmp/.env.backup" ]; then
            echo "üíæ Restoring .env file..."
            mv "/tmp/.env.backup" .env
          else
            echo "‚ö†Ô∏è No .env file found. Creating basic .env from template..."
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª –∏–∑ env_example.txt –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [ -f "env_example.txt" ]; then
              cp env_example.txt .env
              echo "üìÑ Created .env file from env_example.txt"
              echo "‚ö†Ô∏è IMPORTANT: Please edit .env file with your actual values!"
            else
              echo "‚ùå No env_example.txt found. You must create .env file manually."
            fi
          fi

          echo "üì¶ Building new images..."
          docker-compose build --no-cache --pull

          echo "üöÄ Starting services..."
          docker-compose up -d

          echo "‚è≥ Waiting for services to start..."
          sleep 10

          echo "üìä Checking service status..."
          docker ps --filter "name=fiscal_"

          echo "üßπ Cleaning up old Docker resources..."
          docker system prune -f --volumes || true

          echo "‚úÖ Deployment completed successfully!"
          echo "üéØ Services running:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=fiscal_"
        EOF

    - name: Notify deployment status
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment to production completed successfully!"
        else
          echo "‚ùå Deployment failed!"
        fi
