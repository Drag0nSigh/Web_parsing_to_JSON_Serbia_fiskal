name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Tests & Linting
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_fiscal_data
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Test environment variables
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: test_fiscal_data
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_fiscal_data
      TG_TOKEN: "123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      ADMIN_ID: "123456789"
      DAILY_REQUEST_LIMIT: "50"
      LOG_RETENTION_DAYS: "7"
      # ChromeDriver settings
      WDM_LOG_LEVEL: 0
      WDM_LOCAL: 1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Chrome
      run: |
        # Install Chrome only
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

        # Verify Chrome installation
        google-chrome --version

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        # Update webdriver-manager to latest version for new API support
        pip install --upgrade webdriver-manager

    - name: Auto-format code
      run: |
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        black --line-length=120 src/ tests/
        isort --profile=black --line-length=120 src/ tests/
        autoflake --in-place --remove-all-unused-imports --remove-duplicate-keys --remove-unused-variables --recursive src/ tests/

    - name: Run linting (relaxed)
      run: |
        # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ª–∏–Ω—Ç–∏–Ω–≥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        flake8 src/ tests/ \
          --max-line-length=1000 \
          --extend-ignore=E203,E402,E722,F841,F541,W291 \
          --exclude=migrations \
          --statistics
      continue-on-error: true

    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'

    - name: Initialize database
      run: |
        cd src
        python -c "
        import os
        os.environ.update({
            'POSTGRES_HOST': 'localhost',
            'POSTGRES_PORT': '5432',
            'POSTGRES_DB': 'test_fiscal_data',
            'POSTGRES_USER': 'test_user',
            'POSTGRES_PASSWORD': 'test_password'
        })
        from db.database import db_manager
        db_manager.init_database()
        print('Database initialized successfully')
        "

    - name: Run tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          --tb=short

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy via SSH
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

          echo "üë§ Current user: $(whoami)"
          echo "üìÅ Preparing deployment..."
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          TEMP_DIR="/tmp/fiscal-parser-$(date +%s)"
          FINAL_DIR="/opt/fiscal-parser"
          
          echo "üìÇ Cloning repository to temporary directory..."
          git clone https://github.com/${{ github.repository }}.git "$TEMP_DIR"
          cd "$TEMP_DIR"
          git checkout main
          
          echo "üõë Stopping existing services and backing up .env..."
          # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ -d "$FINAL_DIR" ] && [ -f "$FINAL_DIR/.env" ]; then
            echo "üíæ Backing up existing .env file..."
            cp "$FINAL_DIR/.env" "/tmp/.env.backup"
          fi
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Docker Compose 1.29.2)
          if [ -d "$FINAL_DIR" ]; then
            cd "$FINAL_DIR"
            docker-compose down --remove-orphans 2>/dev/null || true
            cd ..
          fi
          
          echo "üì¶ Moving new code to production directory..."
          # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
          if [ -d "$FINAL_DIR" ]; then
            rm -rf "$FINAL_DIR"/* "$FINAL_DIR"/.* 2>/dev/null || true
          fi
          
          # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          mv "$TEMP_DIR"/* "$FINAL_DIR"/ 2>/dev/null || true
          mv "$TEMP_DIR"/.* "$FINAL_DIR"/ 2>/dev/null || true
          rmdir "$TEMP_DIR" || true
          cd "$FINAL_DIR"
          
          # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
          if [ -f "/tmp/.env.backup" ]; then
            echo "üíæ Restoring .env file..."
            mv "/tmp/.env.backup" .env
          else
            echo "‚ö†Ô∏è No .env file found. Creating basic .env from template..."
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª –∏–∑ env_example.txt –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [ -f "env_example.txt" ]; then
              cp env_example.txt .env
              echo "üìÑ Created .env file from env_example.txt"
              echo "‚ö†Ô∏è IMPORTANT: Please edit .env file with your actual values!"
            else
              echo "‚ùå No env_example.txt found. You must create .env file manually."
            fi
          fi

          echo "üì¶ Building new images..."
          # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Docker Compose 1.29.2 —Å Docker API
          docker-compose build --no-cache --pull 2>/dev/null || true

          echo "üöÄ Starting services..."
          # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ docker-compose
          if docker-compose up -d 2>/dev/null; then
            echo "‚úÖ Services started with docker-compose"
          else
            echo "‚ö†Ô∏è docker-compose failed, trying manual startup..."
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            docker stop fiscal_bot fiscal_postgres 2>/dev/null || true
            docker rm fiscal_bot fiscal_postgres 2>/dev/null || true
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ volumes –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            echo "üóëÔ∏è Removing old PostgreSQL volume to recreate database..."
            docker volume rm fiscal_postgres_data 2>/dev/null || echo "Volume fiscal_postgres_data not found or already removed"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker daemon –∏ –ø—Ä–∞–≤–∞
            echo "üîç Checking Docker daemon status..."
            docker version || echo "Docker daemon not accessible"
            docker info | head -10 || echo "Cannot get Docker info"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
            echo "üîç Checking .env file..."
            if [ -f .env ]; then
              echo "‚úÖ .env file exists"
              echo "üìã Key environment variables:"
              grep -E "^(POSTGRES_|DATABASE_|BOT_TOKEN)" .env | sed 's/=.*/=***/' || echo "No key variables found"
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ .env —Ñ–∞–π–ª
              ls -la .env
            else
              echo "‚ùå .env file not found!"
              exit 1
            fi
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å
            docker network create fiscal_network 2>/dev/null || true
            echo "üåê Network fiscal_network created or already exists"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∑ .env
            echo "üêò Starting PostgreSQL container..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞ postgres:15
            echo "üîç Checking if postgres:15 image exists..."
            if docker images postgres:15 --format "{{.Repository}}:{{.Tag}}" | grep -q postgres:15; then
              echo "‚úÖ postgres:15 image exists"
            else
              echo "‚ö†Ô∏è postgres:15 image not found, pulling..."
              docker pull postgres:15 || echo "Failed to pull postgres:15"
            fi
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL
            echo "üöÄ Attempting to start PostgreSQL container..."
            if docker run -d --name fiscal_postgres --network fiscal_network \
              --env-file .env \
              -p ${POSTGRES_PORT:-5432}:5432 \
              -v fiscal_postgres_data:/var/lib/postgresql/data_fiscal_data \
              postgres:15; then
              echo "‚úÖ PostgreSQL container started successfully"
            else
              echo "‚ùå Failed to start PostgreSQL container"
              echo "üîç Checking if container exists but failed to start..."
              docker ps -a --filter "name=fiscal_postgres" || echo "No fiscal_postgres container found"
              docker logs fiscal_postgres 2>/dev/null || echo "Container does not exist or has no logs"
              
              # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –±–µ–∑ --env-file
              echo "üîÑ Trying alternative PostgreSQL startup without --env-file..."
              docker rm fiscal_postgres 2>/dev/null || true
              
              # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
              POSTGRES_DB_VAL=$(grep "^POSTGRES_DB=" .env | cut -d'=' -f2)
              POSTGRES_USER_VAL=$(grep "^POSTGRES_USER=" .env | cut -d'=' -f2)
              POSTGRES_PASSWORD_VAL=$(grep "^POSTGRES_PASSWORD=" .env | cut -d'=' -f2)
              
              if docker run -d --name fiscal_postgres --network fiscal_network \
                -e POSTGRES_DB="${POSTGRES_DB_VAL:-fiscal_data}" \
                -e POSTGRES_USER="${POSTGRES_USER_VAL:-fiscal_user}" \
                -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD_VAL:-secure_password_123}" \
                -p ${POSTGRES_PORT:-5432}:5432 \
                -v fiscal_postgres_data:/var/lib/postgresql/data_fiscal_data \
                postgres:15; then
                echo "‚úÖ PostgreSQL container started with direct env vars"
              else
                echo "‚ùå Failed to start PostgreSQL even with direct env vars"
                echo "üîç Final check - all containers:"
                docker ps -a
                exit 1
              fi
            fi
            
            sleep 10  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ë–î
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PostgreSQL –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            echo "üîç Checking PostgreSQL connection..."
            docker exec fiscal_postgres pg_isready -U ${POSTGRES_USER:-fiscal_user} -d ${POSTGRES_DB:-fiscal_data} || echo "PostgreSQL not ready yet"
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –±–æ—Ç–∞
            echo "üî® Building bot image..."
            if docker build -t fiscal_bot -f src/Dockerfile .; then
              echo "‚úÖ Bot image built successfully"
            else
              echo "‚ùå Failed to build bot image"
              exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            echo "üîç Checking PostgreSQL container status..."
            if docker ps --filter "name=fiscal_postgres" --format "{{.Status}}" | grep -q "Up"; then
              echo "‚úÖ PostgreSQL container is running"
              
              # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å PostgreSQL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
              echo "üîç Getting PostgreSQL IP address..."
              POSTGRES_IP=$(docker inspect fiscal_postgres --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null)
              if [ -n "$POSTGRES_IP" ] && [ "$POSTGRES_IP" != "<no value>" ]; then
                echo "‚úÖ PostgreSQL IP: $POSTGRES_IP"
              else
                echo "‚ö†Ô∏è Cannot get PostgreSQL IP, trying alternative approaches..."
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ docker network inspect
                echo "üîç Trying to get IP via network inspection..."
                NETWORK_ID=$(docker inspect fiscal_postgres --format='{{range $key, $value := .NetworkSettings.Networks}}{{$key}}{{end}}' 2>/dev/null)
                if [ -n "$NETWORK_ID" ]; then
                  POSTGRES_IP=$(docker network inspect "$NETWORK_ID" --format='{{range .Containers}}{{if eq .Name "fiscal_postgres"}}{{.IPv4Address}}{{end}}{{end}}' 2>/dev/null | cut -d'/' -f1)
                  if [ -n "$POSTGRES_IP" ]; then
                    echo "‚úÖ PostgreSQL IP via network inspect: $POSTGRES_IP"
                  else
                    echo "‚ö†Ô∏è Still cannot get IP, will use hostname 'postgres'"
                    POSTGRES_IP="postgres"
                  fi
                else
                  echo "‚ö†Ô∏è Cannot get network ID, will use hostname 'postgres'"
                  POSTGRES_IP="postgres"
                fi
              fi
            else
              echo "‚ùå PostgreSQL container is not running!"
              echo "üîç PostgreSQL container status:"
              docker ps -a --filter "name=fiscal_postgres" || echo "No fiscal_postgres container found"
              echo "üîç PostgreSQL container logs:"
              docker logs fiscal_postgres 2>/dev/null || echo "No logs available"
              echo "‚ùå Cannot start bot without PostgreSQL"
              exit 1
            fi
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
            echo "ü§ñ Starting bot container..."
            if docker run -d --name fiscal_bot --network fiscal_network \
              --env-file .env \
              -e POSTGRES_HOST="$POSTGRES_IP" \
              -e PYTHONPATH=/app/src \
              -e PYTHONUNBUFFERED=1 \
              -e PYTHONDONTWRITEBYTECODE=1 \
              -v ./log:/app/log \
              fiscal_bot; then
              echo "‚úÖ Bot container started successfully with POSTGRES_HOST=$POSTGRES_IP"
            else
              echo "‚ùå Failed to start bot container with network, trying localhost connection..."
              echo "üîç Checking if container exists but failed to start..."
              docker logs fiscal_bot 2>/dev/null || echo "Container does not exist"
              
              # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ —Å–µ—Ç–∏, —á–µ—Ä–µ–∑ localhost
              echo "üîÑ Trying to start bot without network (localhost connection)..."
              docker rm fiscal_bot 2>/dev/null || true
              
              # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç PostgreSQL
              POSTGRES_PORT_VAL=$(grep "^POSTGRES_PORT=" .env | cut -d'=' -f2 || echo "5432")
              
              if docker run -d --name fiscal_bot \
                --env-file .env \
                -e POSTGRES_HOST=host.docker.internal \
                -e POSTGRES_PORT="$POSTGRES_PORT_VAL" \
                -e PYTHONPATH=/app/src \
                -e PYTHONUNBUFFERED=1 \
                -e PYTHONDONTWRITEBYTECODE=1 \
                -v ./log:/app/log \
                fiscal_bot; then
                echo "‚úÖ Bot container started with host.docker.internal"
              else
                echo "‚ùå Failed to start bot even with host.docker.internal"
                echo "üîç Final container status check:"
                docker ps -a --filter "name=fiscal_" || echo "No fiscal containers found"
                exit 1
              fi
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ PostgreSQL
            sleep 5
            echo "üîç Testing connection from bot to PostgreSQL..."
            docker exec fiscal_bot ping -c 1 postgres || echo "Cannot ping postgres from bot"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            echo "üîç Network configuration check..."
            echo "üìã PostgreSQL container networks:"
            docker inspect fiscal_postgres --format='{{range $key, $value := .NetworkSettings.Networks}}{{$key}}: {{$value.IPAddress}}{{end}}' 2>/dev/null || echo "Cannot inspect PostgreSQL network"
            
            echo "üìã Bot container networks:"
            docker inspect fiscal_bot --format='{{range $key, $value := .NetworkSettings.Networks}}{{$key}}: {{$value.IPAddress}}{{end}}' 2>/dev/null || echo "Cannot inspect Bot network"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS resolution –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–æ—Ç–∞
            echo "üîç DNS resolution test from bot container..."
            docker exec fiscal_bot nslookup postgres || echo "DNS resolution failed"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL –ø–æ IP
            echo "üîç Trying to connect to PostgreSQL by IP..."
            POSTGRES_IP=$(docker inspect fiscal_postgres --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null)
            if [ -n "$POSTGRES_IP" ]; then
              echo "PostgreSQL IP: $POSTGRES_IP"
              docker exec fiscal_bot ping -c 1 "$POSTGRES_IP" || echo "Cannot ping PostgreSQL by IP"
            else
              echo "Cannot get PostgreSQL IP address"
            fi
          fi

          echo "‚è≥ Waiting for services to start..."
          sleep 10

          echo "üìä Checking service status..."
          echo "üîç All running containers:"
          docker ps -a
          echo "üîç Containers with 'fiscal' in name:"
          docker ps --filter "name=fiscal_" -a
          echo "üîç Checking networks..."
          docker network ls
          echo "üîç Checking container networks..."
          docker inspect fiscal_postgres --format='{{range .NetworkSettings.Networks}}{{.NetworkID}} {{end}}' 2>/dev/null || echo "PostgreSQL container not found"
          docker inspect fiscal_bot --format='{{range .NetworkSettings.Networks}}{{.NetworkID}} {{end}}' 2>/dev/null || echo "Bot container not found"
          
          echo "üîç Checking if containers actually started..."
          if docker ps --filter "name=fiscal_postgres" --format "table {{.Names}}\t{{.Status}}" | grep -q fiscal_postgres; then
            echo "‚úÖ PostgreSQL container is running"
          else
            echo "‚ùå PostgreSQL container is NOT running"
            echo "üîç Checking PostgreSQL container logs if it exists..."
            docker logs fiscal_postgres 2>/dev/null || echo "PostgreSQL container does not exist"
          fi
          
          if docker ps --filter "name=fiscal_bot" --format "table {{.Names}}\t{{.Status}}" | grep -q fiscal_bot; then
            echo "‚úÖ Bot container is running"
          else
            echo "‚ùå Bot container is NOT running"
            echo "üîç Checking Bot container logs if it exists..."
            docker logs fiscal_bot 2>/dev/null || echo "Bot container does not exist"
          fi

          echo "üßπ Cleaning up old Docker resources..."
          docker system prune -f --volumes || true

          echo "‚úÖ Deployment completed successfully!"
          echo "üéØ Services running:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=fiscal_"
        EOF

    - name: Notify deployment status
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment to production completed successfully!"
        else
          echo "‚ùå Deployment failed!"
        fi
