name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Tests & Linting
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_fiscal_data
          POSTGRES_USER: test_user  
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      # Test environment variables
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: test_fiscal_data
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_fiscal_data
      TG_TOKEN: "123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      ADMIN_ID: "123456789"
      DAILY_REQUEST_LIMIT: "50"
      LOG_RETENTION_DAYS: "7"
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Chrome and ChromeDriver
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
        chrome-driver-version: stable
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        
    - name: Run code formatting check
      run: |
        black --check --line-length=120 src/ tests/
        
    - name: Run import sorting check
      run: |
        isort --check-only --profile=black --line-length=120 src/ tests/
        
    - name: Run linting
      run: |
        flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203
        
    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        
    - name: Initialize database
      run: |
        cd src
        python -c "
        import os
        os.environ.update({
            'POSTGRES_HOST': 'localhost',
            'POSTGRES_PORT': '5432', 
            'POSTGRES_DB': 'test_fiscal_data',
            'POSTGRES_USER': 'test_user',
            'POSTGRES_PASSWORD': 'test_password'
        })
        from db.database import db_manager
        db_manager.init_database()
        print('Database initialized successfully')
        "
        
    - name: Run tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          --tb=short

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      if: ${{ secrets.DEPLOY_HOST && secrets.DEPLOY_SSH_KEY }}
      
    - name: Deploy via SSH
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          cd /opt/fiscal-parser || exit 1
          
          echo "üîÑ Updating code..."
          git pull origin main
          
          echo "üõë Stopping services..."
          docker-compose down
          
          echo "üì¶ Building new images..."
          docker-compose build --no-cache
          
          echo "üöÄ Starting services..."
          docker-compose up -d
          
          echo "üßπ Cleaning up..."
          docker system prune -f
          
          echo "‚úÖ Deployment completed successfully!"
        EOF
      if: ${{ secrets.DEPLOY_HOST && secrets.DEPLOY_SSH_KEY }}
      
    - name: Health Check
      run: |
        echo "‚è≥ Waiting for service to start..."
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
        if curl -f -s --max-time 30 http://${{ secrets.DEPLOY_HOST }}:8080/health > /dev/null 2>&1; then
          echo "‚úÖ Service is healthy!"
        else
          echo "‚ùå Health check failed!"
          exit 1
        fi
      if: ${{ secrets.DEPLOY_HOST && secrets.HEALTH_CHECK_URL }}
      continue-on-error: true
      
    - name: Notify deployment status
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment to production completed successfully!"
        else
          echo "‚ùå Deployment failed!"
        fi