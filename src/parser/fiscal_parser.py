"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
"""

import logging
import time
from datetime import datetime
from decimal import Decimal
from typing import Dict, List, Optional

from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager

from models.fiscal_models import (
    AmountsNds,
    AmountsReceiptNds,
    Document,
    FiscalData,
    Item,
    Receipt,
    SerbianFiscalData,
    Ticket,
)
from utils.log_manager import get_log_manager

# –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–æ–≤
log_manager = get_log_manager()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = log_manager.setup_logging("parser", logging.INFO)


class FiscalParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–µ—Ä–±—Å–∫–∏—Ö —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, headless: bool = True):
        self.headless = headless
        self.driver = None
        self._setup_driver()

    def _setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        chrome_options = Options()
        if self.headless:
            chrome_options.add_argument("--headless")

        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-software-rasterizer")
        chrome_options.add_argument("--disable-background-timer-throttling")
        chrome_options.add_argument("--disable-backgrounding-occluded-windows")
        chrome_options.add_argument("--disable-renderer-backgrounding")
        chrome_options.add_argument("--disable-features=TranslateUI")
        chrome_options.add_argument("--disable-ipc-flooding-protection")
        chrome_options.add_argument("--disable-hang-monitor")
        chrome_options.add_argument("--disable-prompt-on-repost")
        chrome_options.add_argument("--disable-sync")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-images")
        # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º JavaScript - –Ω—É–∂–µ–Ω –¥–ª—è Knockout.js
        # chrome_options.add_argument("--disable-javascript")
        chrome_options.add_argument("--disable-java")
        chrome_options.add_argument("--disable-flash")
        chrome_options.add_argument("--disable-default-apps")
        chrome_options.add_argument("--disable-background-networking")
        chrome_options.add_argument("--disable-background-downloads")
        chrome_options.add_argument("--disable-preconnect")
        chrome_options.add_argument("--disable-dns-prefetch")
        chrome_options.add_argument("--disable-client-side-phishing-detection")
        chrome_options.add_argument("--disable-component-update")
        chrome_options.add_argument("--disable-domain-reliability")
        chrome_options.add_argument("--disable-features=AudioServiceOutOfProcess")
        chrome_options.add_argument("--disable-features=MediaRouter")
        chrome_options.add_argument("--aggressive-cache-discard")
        chrome_options.add_argument("--memory-pressure-off")

        # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ CSS –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        prefs = {
            "profile.managed_default_content_settings.images": 2,
            "profile.default_content_setting_values.notifications": 2,
            "profile.managed_default_content_settings.media_stream": 2,
        }
        chrome_options.add_experimental_option("prefs", prefs)

        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        chrome_options.add_argument("--log-level=3")
        chrome_options.add_argument("--silent")

        # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π chromedriver –≤ Docker
        import os

        if os.path.exists("/usr/bin/chromedriver"):
            service = Service("/usr/bin/chromedriver")
        else:
            # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)

        # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        self.driver.implicitly_wait(5)
        self.driver.set_page_load_timeout(30)

        return self.driver

    def parse_url(self, url: str) -> SerbianFiscalData:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ URL"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä–∞–π–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            if not self.driver or not self.driver.service.is_connectable():
                self._setup_driver()
        except:
            self._setup_driver()

        try:
            logger.info(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(url)

            logger.info("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Knockout.js –∏ –¥–∞–Ω–Ω—ã—Ö
            self._wait_for_data_loading()

            logger.info("üìÑ –ü–æ–ª—É—á–∞–µ–º HTML...")
            # –ü–æ–ª—É—á–∞–µ–º HTML –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript
            html_content = self.driver.page_source

            logger.info("üîç –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...")
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            return self._parse_html_content(html_content)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback

            traceback.print_exc()
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            return SerbianFiscalData(
                tin="",
                shop_name="",
                shop_address="",
                city="",
                administrative_unit="",
                invoice_number="",
                total_amount=Decimal("0"),
                transaction_type_counter=0,
                total_counter=0,
                invoice_counter_extension="",
                signed_by="",
                sdc_date_time=datetime.now(),
                buyer_id=None,
                requested_by="",
                invoice_type="",
                transaction_type="",
                status="",
                items=[],
            )

    def _wait_for_data_loading(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Knockout.js"""
        try:
            # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            start_time = time.time()
            WebDriverWait(self.driver, 15).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, ".sk-spinner")))
            logger.info(f"‚úÖ –°–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—á–µ–∑ –∑–∞ {time.time() - start_time} —Å–µ–∫—É–Ω–¥")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é)
            logger.info("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
            try:
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞ —Ä–∞—á—É–Ω–∞"
                specs_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "a[href='#collapse-specs']"))
                )
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫
                collapse_div = self.driver.find_element(By.CSS_SELECTOR, "#collapse-specs")
                if "show" not in collapse_div.get_attribute("class"):
                    logger.info("üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
                    specs_button.click()
                    time.sleep(0.25)  # –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
                    logger.info("‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–∫—Ä—ã—Ç")
                else:
                    logger.info("‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: {e}")

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            selectors_to_try = [
                "tbody[data-bind*='Specifications'] tr",  # Knockout.js –±–∏–Ω–¥–∏–Ω–≥ - –ü–†–ò–û–†–ò–¢–ï–¢
                "tbody[data-bind*='foreach: Specifications'] tr",  # –¢–æ—á–Ω—ã–π –±–∏–Ω–¥–∏–Ω–≥
                "table tbody[data-bind*='Specifications'] tr",  # –¢–∞–±–ª–∏—Ü–∞ —Å –±–∏–Ω–¥–∏–Ω–≥–æ–º
                "table.invoice-table tbody tr",
                "table tbody tr",
                "tbody tr",
                ".invoice-table tbody tr",
                "table tr",
                "tr[data-bind*='Specifications']",
                "table.invoice-table tbody",
            ]

            table_found = False
            for selector in selectors_to_try:
                try:
                    WebDriverWait(self.driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    table_found = True
                    break
                except:
                    logger.debug(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    continue

            if not table_found:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(0.5)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            time.sleep(0.5)

    def _parse_html_content(self, html_content: str) -> SerbianFiscalData:
        """–ü–∞—Ä—Å–∏–Ω–≥ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        soup = BeautifulSoup(html_content, "html.parser")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = {
            "tin": self._extract_tin(soup),
            "shop_name": self._extract_shop_name(soup),
            "shop_address": self._extract_shop_address(soup),
            "city": self._extract_city(soup),
            "administrative_unit": self._extract_administrative_unit(soup),
            "invoice_number": self._extract_invoice_number(soup),
            "total_amount": self._extract_total_amount(soup),
            "transaction_type_counter": self._extract_transaction_type_counter(soup),
            "total_counter": self._extract_total_counter(soup),
            "invoice_counter_extension": self._extract_invoice_counter_extension(soup),
            "signed_by": self._extract_signed_by(soup),
            "sdc_date_time": self._extract_sdc_date_time(soup),
            "buyer_id": self._extract_buyer_id(soup),
            "requested_by": self._extract_requested_by(soup),
            "invoice_type": self._extract_invoice_type(soup),
            "transaction_type": self._extract_transaction_type(soup),
            "status": self._extract_status(soup),
            "items": self._extract_items_from_table(soup),
        }

        return SerbianFiscalData(**data)

    def _extract_tin(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ü–ò–ë"""
        tin_element = soup.find("span", {"id": "tinLabel"})
        return tin_element.get_text(strip=True) if tin_element else ""

    def _extract_shop_name(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        shop_element = soup.find("span", {"id": "shopFullNameLabel"})
        return shop_element.get_text(strip=True) if shop_element else ""

    def _extract_shop_address(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
        address_element = soup.find("span", {"id": "addressLabel"})
        return address_element.get_text(strip=True) if address_element else ""

    def _extract_city(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
        city_element = soup.find("span", {"id": "cityLabel"})
        return city_element.get_text(strip=True) if city_element else ""

    def _extract_administrative_unit(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø—à—Ç–∏–Ω—ã"""
        admin_element = soup.find("span", {"id": "administrativeUnitLabel"})
        return admin_element.get_text(strip=True) if admin_element else ""

    def _extract_invoice_number(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞"""
        invoice_element = soup.find("span", {"id": "invoiceNumberLabel"})
        return invoice_element.get_text(strip=True) if invoice_element else ""

    def _extract_total_amount(self, soup: BeautifulSoup) -> Decimal:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã"""
        total_element = soup.find("span", {"id": "totalAmountLabel"})
        if total_element:
            amount_text = total_element.get_text(strip=True)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            return self._parse_serbian_number(amount_text)
        return Decimal("0")

    def _extract_transaction_type_counter(self, soup: BeautifulSoup) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        counter_element = soup.find("span", {"id": "transactionTypeCounterLabel"})
        if counter_element:
            return int(counter_element.get_text(strip=True))
        return 0

    def _extract_total_counter(self, soup: BeautifulSoup) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞"""
        counter_element = soup.find("span", {"id": "totalCounterLabel"})
        if counter_element:
            return int(counter_element.get_text(strip=True))
        return 0

    def _extract_invoice_counter_extension(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–µ–∫–∞"""
        extension_element = soup.find("span", {"id": "invoiceCounterExtensionLabel"})
        return extension_element.get_text(strip=True) if extension_element else ""

    def _extract_signed_by(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏"""
        signed_element = soup.find("span", {"id": "signedByLabel"})
        return signed_element.get_text(strip=True) if signed_element else ""

    def _extract_sdc_date_time(self, soup: BeautifulSoup) -> datetime:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ü–§–†"""
        date_element = soup.find("span", {"id": "sdcDateTimeLabel"})
        if date_element:
            date_text = date_element.get_text(strip=True)
            try:
                return datetime.strptime(date_text, "%d.%m.%Y. %H:%M:%S")
            except ValueError:
                pass
        return datetime.now()

    def _extract_buyer_id(self, soup: BeautifulSoup) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
        buyer_element = soup.find("span", {"id": "buyerIdLabel"})
        buyer_text = buyer_element.get_text(strip=True) if buyer_element else ""
        return buyer_text if buyer_text else None

    def _extract_requested_by(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫—Ç–æ –∑–∞—Ç—Ä–µ–±–æ–≤–∞–ª"""
        requested_element = soup.find("span", {"id": "requestedByLabel"})
        return requested_element.get_text(strip=True) if requested_element else ""

    def _extract_invoice_type(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–µ–∫–∞"""
        type_element = soup.find("span", {"id": "invoiceTypeId"})
        return type_element.get_text(strip=True) if type_element else ""

    def _extract_transaction_type(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        type_element = soup.find("span", {"id": "transactionTypeId"})
        return type_element.get_text(strip=True) if type_element else ""

    def _extract_status(self, soup: BeautifulSoup) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ–∫–∞"""
        status_element = soup.find("label", {"id": "invoiceStatusLabel"})
        return status_element.get_text(strip=True) if status_element else ""

    def _extract_items_from_table(self, soup: BeautifulSoup) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ Knockout.js"""
        items = []

        logger.info("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ HTML...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        debug_filename = f"debug_{datetime.now().strftime('%Y-%m-%d')}.html"
        debug_path = log_manager.get_writable_file_path(debug_filename)

        if debug_path:
            try:
                with open(debug_path, "w", encoding="utf-8") as f:
                    f.write(str(soup.prettify()))
                logger.info(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {debug_path} –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {e}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –æ—Ç–ª–∞–¥–∫–∏")

        # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –ø–æ Knockout.js –±–∏–Ω–¥–∏–Ω–≥–∞–º
        items = self._extract_items_by_knockout_binding(soup)
        if items:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Knockout.js: {len(items)}")
            return items

        # –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü
        all_rows = soup.find_all("tr")
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü: {len(all_rows)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for i, row in enumerate(all_rows[:10]):
            cells = row.find_all(["td", "th"])
            if cells:
                cell_texts = [cell.get_text(strip=True) for cell in cells]
                logger.debug(f"  –°—Ç—Ä–æ–∫–∞ {i}: {cell_texts}")

        for i, row in enumerate(all_rows):
            cells = row.find_all(["td", "th"])
            if len(cells) >= 4:  # –ú–∏–Ω–∏–º—É–º 4 –∫–æ–ª–æ–Ω–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞, —Å—É–º–º–∞)
                cell_texts = [cell.get_text(strip=True) for cell in cells]
                logger.debug(f"  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É {i}: {cell_texts}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                if self._is_item_row(cell_texts):
                    logger.debug(f"  ‚úÖ –°—Ç—Ä–æ–∫–∞ {i} –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Ç–æ–≤–∞—Ä")
                    try:
                        item = self._parse_item_row(cells)
                        if item and item["name"]:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                            items.append(item)
                            logger.info(
                                f"  ‚úÖ –¢–æ–≤–∞—Ä {len(items)}: {item['name']} - "
                                f"{item['quantity']} x {item['price']} = {item['sum']}"
                            )
                        else:
                            logger.warning(f"  ‚ùå –¢–æ–≤–∞—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    except Exception as e:
                        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
                        continue
                else:
                    logger.debug(f"  ‚ùå –°—Ç—Ä–æ–∫–∞ {i} –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Ç–æ–≤–∞—Ä")

        # –ú–µ—Ç–æ–¥ 3: –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        if not items:
            logger.info("üîç –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É...")
            items = self._extract_items_by_text_search(soup)

        logger.info(f"üì¶ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}")
        return items

    def _extract_items_by_knockout_binding(self, soup: BeautifulSoup) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Knockout.js –±–∏–Ω–¥–∏–Ω–≥–∏"""
        items = []
        seen_items = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-bind="foreach: Specifications"
        knockout_elements = soup.find_all(attrs={"data-bind": lambda x: x and "Specifications" in x})
        logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ Knockout.js —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(knockout_elements)}")

        for element in knockout_elements:
            logger.debug(f"  Knockout —ç–ª–µ–º–µ–Ω—Ç: {element.name} - {element.get('data-bind')}")

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            rows = element.find_all("tr")
            for row in rows:
                cells = row.find_all(["td", "th"])
                if len(cells) >= 4:  # –ú–∏–Ω–∏–º—É–º 4 –∫–æ–ª–æ–Ω–∫–∏
                    try:
                        item = self._parse_item_row(cells)
                        if item and item["name"]:
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                            item_key = f"{item['name']}_{item['quantity']}_{item['price']}"
                            if item_key not in seen_items:
                                items.append(item)
                                seen_items.add(item_key)
                                logger.info(f"    ‚úÖ –¢–æ–≤–∞—Ä: {item['name']}")
                            else:
                                logger.debug(f"    ‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: {item['name']}")
                    except Exception as e:
                        logger.error(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")

        return items

    def _extract_items_by_text_search(self, soup: BeautifulSoup) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É (fallback –º–µ—Ç–æ–¥)"""
        items = []

        logger.info("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É...")

        # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —á–∏—Å–ª–∞ –∏ —Ü–µ–Ω—ã
        text_content = soup.get_text()

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏
        lines = text_content.split("\n")
        for line in lines:
            line = line.strip()
            if len(line) > 10 and any(char.isdigit() for char in line):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ–≤–∞—Ä–∞
                if self._looks_like_item_line(line):
                    logger.debug(f"  üìù –í–æ–∑–º–æ–∂–Ω—ã–π —Ç–æ–≤–∞—Ä: {line[:100]}...")
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    item = self._extract_item_from_line(line)
                    if item:
                        items.append(item)
                        logger.info(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {item['name']}")

        return items

    def _extract_item_from_line(self, line: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        import re

        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å–µ—Ä–±—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        numbers = re.findall(r"\d+[.,]\d+", line)
        if len(numbers) >= 3:  # –ú–∏–Ω–∏–º—É–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞, —Å—É–º–º–∞
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞)
                name_match = re.match(r"^([^0-9]+)", line)
                name = name_match.group(1).strip() if name_match else "–¢–æ–≤–∞—Ä"

                # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–∞
                quantity = self._parse_serbian_number(numbers[0])
                price = self._parse_serbian_number(numbers[1])
                total = self._parse_serbian_number(numbers[2])

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ù–î–° –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                nds_type = 2  # 10%

                return {
                    "name": name,
                    "quantity": quantity,
                    "price": price,
                    "sum": total,
                    "nds_type": nds_type,
                    "tax_base": total * Decimal("0.909"),  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    "vat_amount": total * Decimal("0.091"),
                    "label": "–ï",
                }
            except Exception as e:
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
                return None

        return None

    def _looks_like_item_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + —Ü–µ–Ω–∞ + —Å—É–º–º–∞
        import re

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª –≤ —Å–µ—Ä–±—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        serbian_numbers = re.findall(r"\d+[.,]\d+", line)
        if len(serbian_numbers) >= 2:  # –ú–∏–Ω–∏–º—É–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞
            return True

        return False

    def _is_item_row(self, cell_texts: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–æ–º"""
        if len(cell_texts) < 4:  # –ú–∏–Ω–∏–º—É–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞, —Å—É–º–º–∞
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        try:
            # –ö–æ–ª–æ–Ω–∫–∞ 1 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º
            quantity = cell_texts[1].replace(",", ".")
            float(quantity)

            # –ö–æ–ª–æ–Ω–∫–∞ 2 (—Ü–µ–Ω–∞) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º
            price = cell_texts[2].replace(".", "").replace(",", ".")
            float(price)

            # –ö–æ–ª–æ–Ω–∫–∞ 3 (—Å—É–º–º–∞) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º
            total = cell_texts[3].replace(".", "").replace(",", ".")
            float(total)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            if not cell_texts[0].strip():
                return False

            return True
        except:
            return False

    def _parse_item_row(self, cells) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞"""
        name = cells[0].get_text(strip=True)
        quantity_text = cells[1].get_text(strip=True)
        unit_price_text = cells[2].get_text(strip=True)
        total_text = cells[3].get_text(strip=True)
        tax_base_text = cells[4].get_text(strip=True) if len(cells) > 4 else "0"
        vat_amount_text = cells[5].get_text(strip=True) if len(cells) > 5 else "0"
        label = cells[6].get_text(strip=True) if len(cells) > 6 else "–ï"

        logger.debug(f"    üìù –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä: {name} | {quantity_text} | {unit_price_text} | {total_text}")

        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        quantity = self._parse_serbian_number(quantity_text) if quantity_text else Decimal("0")
        unit_price = self._parse_serbian_number(unit_price_text)
        total = self._parse_serbian_number(total_text)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ù–î–° –ø–æ –ª–µ–π–±–ª—É
        nds_type = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
        if "–Ç" in label or "20" in label:
            nds_type = 3  # 20%
        elif "–ï" in label or "10" in label:
            nds_type = 2  # 10%
        elif "–ê" in label:
            nds_type = 1  # –ë–µ–∑ –ù–î–°

        return {
            "name": name,
            "quantity": quantity,
            "price": unit_price,
            "sum": total,
            "nds_type": nds_type,
            "tax_base": self._parse_serbian_number(tax_base_text),
            "vat_amount": self._parse_serbian_number(vat_amount_text),
            "label": label,
        }

    def _parse_serbian_number(self, text: str) -> Decimal:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–µ—Ä–±—Å–∫–∏—Ö —á–∏—Å–µ–ª (1.839,96 -> 1839.96)"""
        if not text:
            return Decimal("0")

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = text.strip()

        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á) –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        cleaned_text = text.replace(".", "").replace(",", ".")

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –º–∏–Ω—É—Å–∞
        import re

        cleaned_text = re.sub(r"[^\d\.\-]", "", cleaned_text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å —á—Ç–æ-—Ç–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        if not cleaned_text or cleaned_text in ["-", "."]:
            return Decimal("0")

        try:
            return Decimal(cleaned_text)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ '{text}' -> '{cleaned_text}': {e}")
            return Decimal("0")

    def _extract_knockout_data(self, soup: BeautifulSoup) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Knockout.js"""
        data = {}
        knockout_elements = soup.find_all(attrs={"data-bind": True})
        for element in knockout_elements:
            binding = element.get("data-bind", "")
            if "text:" in binding:
                field_name = binding.split("text:")[1].strip()
                data[field_name] = element.get_text(strip=True)
        return data

    def _extract_knockout_items(self, soup: BeautifulSoup) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Knockout.js"""
        items = []
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-bind –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        item_elements = soup.find_all(attrs={"data-bind": lambda x: x and "foreach" in x})

        for element in item_elements:
            # –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
            child_elements = element.find_all(attrs={"data-bind": True})

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            current_item = None
            for child in child_elements:
                binding = child.get("data-bind", "")
                text = child.get_text(strip=True)

                if "text: name" in binding:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
                    if current_item:
                        items.append(current_item)

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    current_item = {
                        "name": text,
                        "quantity": 1,
                        "price": Decimal("0"),
                        "sum": Decimal("0"),
                        "nds_type": 2,
                        "payment_type": 1,
                        "product_type": 1,
                    }
                elif current_item:
                    if "text: quantity" in binding:
                        try:
                            current_item["quantity"] = int(text)
                        except ValueError:
                            current_item["quantity"] = 1
                    elif "text: unitPrice" in binding:
                        current_item["price"] = self._parse_serbian_number(text)
                    elif "text: amount" in binding:
                        current_item["sum"] = self._parse_serbian_number(text)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
            if current_item:
                items.append(current_item)

        return items

    def _parse_datetime(self, date_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤ —Å–µ—Ä–±—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not date_str or not date_str.strip():
            return None

        try:
            # –°–µ—Ä–±—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY. HH:MM:SS
            return datetime.strptime(date_str.strip(), "%d.%m.%Y. %H:%M:%S")
        except ValueError:
            try:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
                return datetime.strptime(date_str.strip(), "%d.%m.%Y %H:%M:%S")
            except ValueError:
                return None

    def _extract_city_from_address(self, address: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞"""
        if not address or not address.strip():
            return "Unknown"

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        parts = address.split(",")
        if len(parts) > 1:
            city = parts[-1].strip()
            # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            city = city.split("(")[0].strip()
            return city if city else "Unknown"

        return "Unknown"

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            self.driver = None

    def __enter__(self):
        if self.driver is None:
            self._setup_driver()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()


class SerbianToRussianConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–µ—Ä–±—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç"""

    def __init__(self, serbian_data: SerbianFiscalData):
        self.serbian_data = serbian_data

    def convert(self) -> FiscalData:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ—Ä–±—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç"""
        import random

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –ø–æ –æ–±—Ä–∞–∑—Ü—É rus.json (24 —Å–∏–º–≤–æ–ª–∞)
        import string

        random_id = "".join(random.choices(string.ascii_lowercase + string.digits, k=24))
        logger.info(f"üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID: {random_id}")
        logger.info(f"üîß –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {self.serbian_data.sdc_date_time}")

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        items = []
        for item_data in self.serbian_data.items:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –≤ int (–∫–æ–ø–µ–π–∫–∏)
            quantity = int(float(item_data["quantity"]))  # 1.00 -> 1
            price = int(float(item_data["price"]) * 100)  # 79.99 -> 7999 –∫–æ–ø–µ–µ–∫
            sum_val = int(float(item_data["sum"]) * 100)  # 79.99 -> 7999 –∫–æ–ø–µ–µ–∫

            item = Item(
                name=item_data["name"],
                quantity=quantity,
                price=price,
                sum=sum_val,
                nds=item_data["nds_type"],
                paymentType=4,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ª–∏—á–Ω—ã–µ
                productType=1,  # –¢–æ–≤–∞—Ä
            )
            items.append(item)

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –æ–±—â–∏–π —Ç–æ–≤–∞—Ä
        if not items:
            total_cents = int(float(self.serbian_data.total_amount) * 100)
            item = Item(
                name="–¢–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏",
                quantity=1,  # 1 —Ç–æ–≤–∞—Ä
                price=total_cents,
                sum=total_cents,
                nds=2,  # –ù–î–° 10%
                paymentType=1,
                productType=1,
            )
            items.append(item)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∏
        total_cents = int(float(self.serbian_data.total_amount) * 100)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ù–î–° –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        nds_amounts = {}
        for item in items:
            nds_type = item.nds
            if nds_type not in nds_amounts:
                nds_amounts[nds_type] = 0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ù–î–° (–ø—Ä–∏–º–µ—Ä–Ω–æ 10% –æ—Ç —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–∞)
            if nds_type == 2:  # –ù–î–° 10%
                nds_amount = int(item.sum * 0.1)  # 10% –ù–î–°
            elif nds_type == 3:  # –ù–î–° 20%
                nds_amount = int(item.sum * 0.2)  # 20% –ù–î–°
            else:
                nds_amount = 0

            nds_amounts[nds_type] += nds_amount

        # –°–æ–∑–¥–∞–µ–º amountsReceiptNds
        amounts_nds_list = []
        for nds_type, nds_sum in nds_amounts.items():
            if nds_sum > 0:
                amounts_nds_list.append(AmountsNds(nds=nds_type, ndsSum=nds_sum))

        amounts_receipt_nds = AmountsReceiptNds(amountsNds=amounts_nds_list) if amounts_nds_list else None

        # –°–æ–∑–¥–∞–µ–º —á–µ–∫
        receipt = Receipt(
            code=3,  # –ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            dateTime=self.serbian_data.sdc_date_time.strftime("%Y-%m-%dT%H:%M:%S"),
            fiscalDocumentNumber=self.serbian_data.total_counter,
            fiscalDriveNumber="0000000000000000",  # –ó–∞–≥–ª—É—à–∫–∞
            fiscalSign=int(self.serbian_data.transaction_type_counter),
            fnsUrl="www.nalog.gov.rs",  # –°–µ—Ä–±—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥
            kktRegId=self.serbian_data.tin,
            totalSum=total_cents,
            ecashTotalSum=total_cents,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–µ–∑–Ω–∞–ª–∏—á–Ω—É—é –æ–ø–ª–∞—Ç—É
            operationType=1,  # –ü—Ä–æ–¥–∞–∂–∞
            taxationType=2,  # –£–°–ù –¥–æ—Ö–æ–¥—ã
            appliedTaxationType=2,
            user=self.serbian_data.shop_name,
            userInn=self.serbian_data.tin,
            retailPlace=self.serbian_data.shop_name,
            retailPlaceAddress=f"{self.serbian_data.shop_address}, {self.serbian_data.city}",
            items=items,
            amountsReceiptNds=amounts_receipt_nds,
        )

        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = Document(receipt=receipt)
        ticket = Ticket(document=document)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        logger.info(f"üîß –°–æ–∑–¥–∞–µ–º FiscalData —Å ID: {random_id}")
        logger.info(f"üîß –°–æ–∑–¥–∞–µ–º FiscalData —Å created_at: {self.serbian_data.sdc_date_time}")

        fiscal_data = FiscalData(ticket=ticket)

        logger.debug(f"üîß FiscalData —Å–æ–∑–¥–∞–Ω –±–µ–∑ ID –∏ created_at:")
        logger.debug(f"   ID: {fiscal_data.id}")
        logger.debug(f"   Created: {fiscal_data.created_at}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        fiscal_data.id = random_id
        fiscal_data.created_at = self.serbian_data.sdc_date_time.strftime("%Y-%m-%dT%H:%M:%S+00:00")

        logger.debug(f"üîß FiscalData –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π:")
        logger.debug(f"   ID: {fiscal_data.id}")
        logger.debug(f"   Created: {fiscal_data.created_at}")
        logger.info(f"   FiscalData: {fiscal_data}")

        return fiscal_data


def convert_to_russian_format(serbian_data):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç"""

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    items = []
    for item_data in serbian_data.items:
        item = Item(
            name=item_data["name"],
            quantity=item_data["quantity"],
            price=item_data["price"],
            sum=item_data["sum"],
            nds=item_data["nds_type"],
            payment_type="card",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞—Ä—Ç–∞
            product_type=1,  # –¢–æ–≤–∞—Ä
        )
        items.append(item)

    # –°–æ–∑–¥–∞–µ–º —á–µ–∫
    receipt = Receipt(
        code=3,  # –ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        date_time=serbian_data.sdc_date_time,
        fiscal_document_number=serbian_data.total_counter,
        fiscal_drive_number="0000000000000000",  # –ó–∞–≥–ª—É—à–∫–∞
        fiscal_sign=int(serbian_data.transaction_type_counter),
        fns_url="www.nalog.gov.rs",  # –°–µ—Ä–±—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥
        kkt_reg_id=serbian_data.tin,
        total_sum=serbian_data.total_amount,
        ecash_total_sum=serbian_data.total_amount,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–µ–∑–Ω–∞–ª–∏—á–Ω—É—é –æ–ø–ª–∞—Ç—É
        operation_type=1,  # –ü—Ä–æ–¥–∞–∂–∞
        taxation_type=2,  # –£–°–ù –¥–æ—Ö–æ–¥—ã
        applied_taxation_type=2,
        user=serbian_data.shop_name,
        user_inn=serbian_data.tin,
        retail_place=serbian_data.shop_name,
        retail_place_address=f"{serbian_data.shop_address}, {serbian_data.city}",
        items=items,
    )

    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    document = Document(receipt=receipt)
    ticket = Ticket(document=document)

    return FiscalData(ticket=ticket)


def parse_serbian_fiscal_url(url: str, headless: bool = True) -> Dict:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ—Ä–±—Å–∫–∏—Ö —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ URL"""

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
    with FiscalParser(headless=headless) as parser:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞
        serbian_data = parser.parse_url(url)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        logger.info(f"üîß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
        logger.info(f"   TIN: {serbian_data.tin}")
        logger.info(f"   Shop: {serbian_data.shop_name}")
        logger.info(f"   Total: {serbian_data.total_amount}")
        logger.info(f"   Items: {len(serbian_data.items)}")

        converter = SerbianToRussianConverter(serbian_data)
        russian_data = converter.convert()

        logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info(f"   ID: {russian_data.id}")
        logger.info(f"   Created: {russian_data.created_at}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞–∫ –≤ rus.json
        return [russian_data.model_dump(mode="json", by_alias=True)]
