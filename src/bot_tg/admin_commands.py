#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
"""
import os
import sys
import asyncio
import logging
from pathlib import Path
from datetime import datetime, date
from telegram import Update
from telegram.ext import ContextTypes
from dotenv import load_dotenv

from db.utils import get_recent_logs, get_users_list, get_system_stats, get_database_info, get_request_logs, log_message, get_username_by_id, activate_user, deactivate_user, is_user_active

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def format_datetime(dt_string: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú:–°–°"""
    if not dt_string or dt_string == 'N/A':
        return 'N/A'
    
    try:
        # –ü–∞—Ä—Å–∏–º ISO —Ñ–æ—Ä–º–∞—Ç
        dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%y %H:%M:%S')
    except (ValueError, AttributeError):
        return dt_string

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_id = int(os.getenv('ADMIN_ID', '0'))

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == admin_id

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin_start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text(f"User {update.effective_user.id} is not admin, admin_id: {admin_id}")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω –º–µ–Ω—é
    from .telegram_bot import create_admin_menu
    
    admin_commands = """
üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º</b>
    """
    
    await update.message.reply_text(admin_commands, parse_mode='HTML', reply_markup=create_admin_menu())

async def admin_logs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin_logs - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ª–æ–≥–æ–≤
        logs = get_recent_logs(limit=50)
        
        if not logs:
            await update.message.reply_text("üìù –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:**\n\n"
        
        for i, log in enumerate(logs[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
            created_at = format_datetime(log.get('created_at', 'N/A'))
            user_id = log.get('user_id', 'N/A')
            username = log.get('username', 'N/A')
            status = log.get('status', 'unknown')
            error_message = log.get('error_message', '')
            
            status_emoji = "‚úÖ" if status == 'success' else "‚ùå"
            message += f"{i}. {status_emoji} {created_at}\n"
            message += f"   üë§ ID: {user_id} | @{username}\n"
            if error_message:
                message += f"   ‚ùå –û—à–∏–±–∫–∞: {error_message[:50]}...\n\n"
            else:
                message += f"   üìù –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        if len(logs) > 20:
            message += f"... –∏ –µ—â–µ {len(logs) - 20} –∑–∞–ø–∏—Å–µ–π"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

async def admin_logs_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin_logs_DD_MM_YY - –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_text = update.message.text
        date_str = command_text.replace('/admin_logs_', '')
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD_MM_YY
        try:
            date_obj = datetime.strptime(date_str, '%d_%m_%y')
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î
            iso_date = date_obj.strftime('%Y-%m-%d')
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_logs_DD_MM_YY")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        from datetime import timedelta
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (—Å 00:00:00 –¥–æ 23:59:59)
        date_start = datetime.combine(date_obj, datetime.min.time())
        date_end = datetime.combine(date_obj, datetime.max.time())
        
        logs = get_request_logs(
            limit=100,
            date_from=date_start,
            date_to=date_end
        )
        
        if not logs:
            await update.message.reply_text(f"üìù –õ–æ–≥–∏ –∑–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìù **–õ–æ–≥–∏ –∑–∞ {date_str} ({len(logs)} –∑–∞–ø–∏—Å–µ–π):**\n\n"
        
        for i, log in enumerate(logs[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
            created_at = format_datetime(log.get('created_at', 'N/A'))
            user_id = log.get('user_id', 'N/A')
            username = log.get('username', 'N/A')
            status = log.get('status', 'unknown')
            error_message = log.get('error_message', '')
            
            status_emoji = "‚úÖ" if status == 'success' else "‚ùå"
            message += f"{i}. {status_emoji} {created_at}\n"
            message += f"   üë§ ID: {user_id} | @{username}\n"
            if error_message:
                message += f"   ‚ùå –û—à–∏–±–∫–∞: {error_message[:50]}...\n\n"
            else:
                message += f"   üìù –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        if len(logs) > 20:
            message += f"... –∏ –µ—â–µ {len(logs) - 20} –∑–∞–ø–∏—Å–µ–π"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∑–∞ –¥–∞—Ç—É: {str(e)}")

async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin_users - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_users_list(limit=100)
        
        if not users:
            await update.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)}):**\n\n"
        
        for i, user in enumerate(users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 20
            telegram_id = user.get('telegram_id', 'N/A')
            username = user.get('username', '–±–µ–∑_username')
            created_at = format_datetime(user.get('created_at', 'N/A'))
            last_activity = format_datetime(user.get('last_activity', 'N/A'))
            is_active = user.get('is_active', True)
            
            status_emoji = "üü¢" if is_active else "üî¥"
            
            message += f"{i}. {status_emoji} **@{username}**\n"
            message += f"   üÜî ID: {telegram_id}\n"
            message += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {created_at}\n"
            message += f"   üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
        
        if len(users) > 20:
            message += f"... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")


async def admin_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin_test - —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        from parser.fiscal_parser import parse_serbian_fiscal_url
        
        test_url = "https://suf.purs.gov.rs/v/?vl=AzdWVDYyRUM0N1ZUNjJFQzQYWwEASVUBAHDBGAEAAAAAAAABmOyyJXMAAAAdrdjynx8FFJ7vKJSEWHehCSexnfVJwleCdnX8WapD%2FVqiutLId1kOu75ZXt4Z%2Bsp4oPEXjlYGf0jXnO6%2FcXPw%2FPXq9hZr9uVlrxjhiEVvc44J3xYEaqN2AGIwBxT%2Bco7LOqgAfE6PBUeQlA49tC%2FCvCkGuiVwfXwQfXAHyhDIs3Q29%2FfrLFsGoTpXECXvyKW%2FAg%2BxTXUFlO1zSxraDy2PbDNA%2FYSEYknv0LxtxUxuMU6FUL0fOXGM%2BmXcfYzRkDkjomzsdpiFGzuN9nRThzv16Q4S%2B9aznut5Fb2LWB85BaH4y11GtXMwubfQNzsdUpJZObMDZXcRx4V8tefqUmGlai%2FgEeT6FSrjHMGEP62UgDtokyrzuCqNeMz6JkZuHxE%2FqkLxZnYGwGUx5nRpiGEME1UyLQNUcWFsQgkJiyvWL3FpZsuRjXahZiNM5glVo1bbeISMK8%2BO8BsTPSHAg0jZkGpvi9OOT4qY8T0Zf1OMG4BnVTNM28h5ZMqobV8pjydfj%2BJtvsaDuNdv5C4Nhj3IC%2BaLeQdLFoL%2FfkA2%2F50HWUCi8KWMLVQHwYbJftNfYjPhjlrmbgG3FuDTWPM%2Bakut5GIUu4D8d1wmpqgQBenYX2qnqmcWhfNQu%2FBHz1KhizKvh2NLz%2FjWWiPicWVVM8H2cdU%2BGy4qdKkdk0WKiEtK362QBJnPpz%2BiUEFBoR6osNg%3D"
        
        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä—Å–µ—Ä...")
        result = parse_serbian_fiscal_url(test_url, headless=True)
        
        if result and len(result) > 0:
            await update.message.reply_text("‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            await update.message.reply_text("‚ùå –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

async def admin_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin_status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        import psutil
        import platform
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö
        log_dir = Path("/app/log")
        log_count = len(list(log_dir.glob("requests_log_*.txt"))) if log_dir.exists() else 0
        
        status_message = f"""
üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>

üíª <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ OS: {platform.system()} {platform.release()}
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ RAM: {memory.percent}% ({memory.used // (1024**3)}GB / {memory.total // (1024**3)}GB)
‚Ä¢ Disk: {disk.percent}% ({disk.used // (1024**3)}GB / {disk.total // (1024**3)}GB)

üìä <b>–ë–æ—Ç:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –õ–æ–≥–æ–≤: {log_count} —Ñ–∞–π–ª–æ–≤
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%y %H:%M:%S')}
        """
        
        await update.message.reply_text(status_message, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        stats = get_system_stats(days=7)
        db_info = get_database_info()
        
        if not stats:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (7 –¥–Ω–µ–π):**\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        message += f"üìà **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        message += f"   üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}\n"
        message += f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_requests', 0)}\n"
        message += f"   ‚ùå –û—à–∏–±–æ–∫: {stats.get('failed_requests', 0)}\n"
        message += f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)}\n\n"
        message += f"   üí° <i>–£—Å–ø–µ—à–Ω—ã–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è: –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫, –∫–æ–º–∞–Ω–¥—ã</i>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        daily_stats = stats.get('daily_stats', [])
        if daily_stats:
            message += f"üìÖ **–ü–æ –¥–Ω—è–º:**\n"
            for day_stat in daily_stats[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
                date = day_stat.get('date', 'N/A')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì
                if date != 'N/A':
                    try:
                        date_obj = datetime.fromisoformat(date)
                        date = date_obj.strftime('%d.%m.%y')
                    except (ValueError, AttributeError):
                        pass
                requests = day_stat.get('total_requests', 0)
                users = day_stat.get('unique_users', 0)
                
                message += f"   {date}: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤, {users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        message += f"\nüóÑÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n"
        message += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_info.get('users_count', 0)}\n"
        message += f"   üìù –õ–æ–≥–æ–≤: {db_info.get('logs_count', 0)}\n"
        message += f"   üîó –°—Ç–∞—Ç—É—Å: {db_info.get('connection_status', 'unknown')}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

async def send_message_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑_username"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üì® <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/send ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/send 123456789 –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?</code>",
            parse_mode='HTML'
        )
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        target_user_id = int(context.args[0])
        message_text = ' '.join(context.args[1:])
        target_username = get_username_by_id(target_user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message_text}",
            parse_mode='HTML'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        log_message(user_id, target_user_id, username, f"{target_username}", 'admin_to_user', 'admin_response')
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(
            f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> ID {target_user_id}\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b> {message_text}",
            parse_mode='HTML'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"üì® –ê–¥–º–∏–Ω {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {message_text}")
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/send 123456789 –ü—Ä–∏–≤–µ—Ç!</code>",
            parse_mode='HTML'
        )
    except Exception as e:
        error_msg = str(e)
        if "chat not found" in error_msg.lower():
            await update.message.reply_text(
                f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É.\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π."
            )
        elif "blocked" in error_msg.lower():
            await update.message.reply_text(
                f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )
        else:
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                f"–û—à–∏–±–∫–∞: {error_msg}"
            )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º {username}: {e}")


async def activate_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /activate - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑_username"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args or len(context.args) < 1:
        await update.message.reply_text(
            "‚úÖ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/activate ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/activate 123456789</code>",
            parse_mode='HTML'
        )
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = int(context.args[0])
        target_username = get_username_by_id(target_user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_status = is_user_active(target_user_id)
        
        if current_status:
            await update.message.reply_text(
                f"‚ÑπÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{target_username} (ID: {target_user_id})\n"
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω",
                parse_mode='HTML'
            )
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = activate_user(target_user_id)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            log_message(user_id, target_user_id, username, target_username, 'admin_action', 'user_activated')
            
            await update.message.reply_text(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{target_username} (ID: {target_user_id})\n"
                f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Üí –ê–∫—Ç–∏–≤–µ–Ω",
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω {username} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} (ID: {target_user_id})")
        else:
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                parse_mode='HTML'
            )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/activate 123456789</code>",
            parse_mode='HTML'
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º {username}: {e}")


async def deactivate_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deactivate - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑_username"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args or len(context.args) < 1:
        await update.message.reply_text(
            "üö´ <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/deactivate ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/deactivate 123456789</code>",
            parse_mode='HTML'
        )
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = int(context.args[0])
        target_username = get_username_by_id(target_user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞
        if is_admin(target_user_id):
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_status = is_user_active(target_user_id)
        
        if not current_status:
            await update.message.reply_text(
                f"‚ÑπÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{target_username} (ID: {target_user_id})\n"
                f"üö´ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
                parse_mode='HTML'
            )
            return
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = deactivate_user(target_user_id)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            log_message(user_id, target_user_id, username, target_username, 'admin_action', 'user_deactivated')
            
            await update.message.reply_text(
                f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{target_username} (ID: {target_user_id})\n"
                f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω ‚Üí –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
                parse_mode='HTML'
            )
            
            logger.info(f"üö´ –ê–¥–º–∏–Ω {username} (ID: {user_id}) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} (ID: {target_user_id})")
        else:
            await update.message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                parse_mode='HTML'
            )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/deactivate 123456789</code>",
            parse_mode='HTML'
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º {username}: {e}")
