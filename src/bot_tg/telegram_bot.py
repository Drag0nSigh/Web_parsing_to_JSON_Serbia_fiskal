"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
"""
import logging
import os
from datetime import datetime
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

from db.utils import init_database
from .admin_commands import (
    admin_start, admin_logs, admin_logs_date, admin_users, 
    admin_test, admin_status, admin_stats, send_message_to_user, 
    activate_user_command, deactivate_user_command, is_admin
)
from .user_commands import start, help_command, admin_message, handle_message

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.log_manager import get_log_manager

# –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–æ–≤
log_manager = get_log_manager()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = log_manager.setup_logging("bot", logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TG_TOKEN = os.getenv('TG_TOKEN')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
if not TG_TOKEN or len(TG_TOKEN.split(':')) != 2:
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TG_TOKEN. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BOT_ID:BOT_TOKEN'")

def create_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return InlineKeyboardMarkup([])

def create_admin_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="admin_logs"),
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="admin_test")
        ],
        [
            InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="admin_send_message"),
            InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="admin_status")
        ],
        [
            InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_activate"),
            InlineKeyboardButton("üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_deactivate")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ)"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑_username"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç callback
    if hasattr(context, 'processing_callbacks'):
        if query.id in context.processing_callbacks:
            return
        context.processing_callbacks.add(query.id)
    else:
        context.processing_callbacks = {query.id}
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if query.data == "admin_logs":
        if is_admin(user_id):
            try:
                from db.utils import get_recent_logs
                logs = get_recent_logs(limit=20)
                
                if logs:
                    message = "üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n\n"
                    for i, log in enumerate(logs[:10], 1):
                        created_at = log.get('created_at', 'N/A')
                        user_id_log = log.get('user_id', 'N/A')
                        username_log = log.get('username', 'N/A')
                        status = log.get('status', 'unknown')
                        status_emoji = "‚úÖ" if status == 'success' else "‚ùå"
                        message += f"{i}. {status_emoji} {created_at}\n"
                        message += f"   üë§ ID: {user_id_log} | @{username_log}\n\n"
                else:
                    message = "üìù –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    
                await query.edit_message_text(message, parse_mode='HTML', reply_markup=create_admin_menu())
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}", reply_markup=create_admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_main_menu())
            
    elif query.data == "admin_users":
        if is_admin(user_id):
            try:
                from db.utils import get_users_list
                users = get_users_list(limit=20)
                
                if users:
                    message = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)}):</b>\n\n"
                    for i, user in enumerate(users[:10], 1):
                        telegram_id = user.get('telegram_id', 'N/A')
                        username_log = user.get('username', '–±–µ–∑_username')
                        is_active = user.get('is_active', True)
                        status_emoji = "üü¢" if is_active else "üî¥"
                        message += f"{i}. {status_emoji} <b>@{username_log}</b>\n"
                        message += f"   üÜî ID: {telegram_id}\n\n"
                else:
                    message = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    
                await query.edit_message_text(message, parse_mode='HTML', reply_markup=create_admin_menu())
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}", reply_markup=create_admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_main_menu())
            
    elif query.data == "admin_stats":
        if is_admin(user_id):
            try:
                from db.utils import get_system_stats, get_database_info
                stats = get_system_stats(days=7)
                db_info = get_database_info()
                
                if stats:
                    message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (7 –¥–Ω–µ–π):</b>\n\n"
                    message += f"üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}\n"
                    message += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_requests', 0)}\n"
                    message += f"‚ùå –û—à–∏–±–æ–∫: {stats.get('failed_requests', 0)}\n"
                    message += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)}\n\n"
                    message += f"üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
                    message += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_info.get('users_count', 0)}\n"
                    message += f"üìù –õ–æ–≥–æ–≤: {db_info.get('logs_count', 0)}\n"
                    message += f"üîó –°—Ç–∞—Ç—É—Å: {db_info.get('connection_status', 'unknown')}\n\n"
                    message += f"üí° <i>–£—Å–ø–µ—à–Ω—ã–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è: –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫, –∫–æ–º–∞–Ω–¥—ã</i>"
                else:
                    message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                    
                await query.edit_message_text(message, parse_mode='HTML', reply_markup=create_admin_menu())
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", reply_markup=create_admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_main_menu())
            
    elif query.data == "admin_test":
        if is_admin(user_id):
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await query.edit_message_text("üß™ <b>–¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä—Å–µ—Ä...</b>\n\n‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É...", parse_mode='HTML', reply_markup=create_admin_menu())
                
                # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
                test_url = "https://suf.purs.gov.rs/v/?vl=test"
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞
                try:
                    from parser.fiscal_parser import parse_serbian_fiscal_url
                    result = parse_serbian_fiscal_url(test_url)
                    
                    if result:
                        test_message = f"""
üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:</b>

‚úÖ <b>–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</b>

üìä <b>–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞:</b>
‚Ä¢ URL: <code>{test_url}</code>
‚Ä¢ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: JSON –ø–æ–ª—É—á–µ–Ω

üîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞:</b>
‚Ä¢ Selenium WebDriver: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ BeautifulSoup: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç  
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üí° <b>–ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>
                        """
                    else:
                        test_message = f"""
üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:</b>

‚ö†Ô∏è <b>–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è</b>

üìä <b>–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞:</b>
‚Ä¢ URL: <code>{test_url}</code>
‚Ä¢ –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

üîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞:</b>
‚Ä¢ Selenium WebDriver: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ BeautifulSoup: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç  
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö: ‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üí° <b>–ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏!</b>
                        """
                        
                except Exception as parse_error:
                    test_message = f"""
üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:</b>

‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</b>

üìä <b>–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞:</b>
‚Ä¢ URL: <code>{test_url}</code>
‚Ä¢ –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞
‚Ä¢ –û—à–∏–±–∫–∞: {str(parse_error)}

üîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞:</b>
‚Ä¢ Selenium WebDriver: ‚ùå –ü—Ä–æ–±–ª–µ–º–∞
‚Ä¢ BeautifulSoup: ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö: ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üõ†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Selenium
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Chrome/ChromeDriver
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    """
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞
                await query.edit_message_text(test_message, parse_mode='HTML', reply_markup=create_admin_menu())
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
                await query.edit_message_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞.\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}",
                    parse_mode='HTML',
                    reply_markup=create_admin_menu()
                )
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_main_menu())
            
    elif query.data == "admin_send_message":
        if is_admin(user_id):
            send_message_text = """
üì® <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/send ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>/send 123456789 –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?</code>
‚Ä¢ <code>/send 987654321 –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö</code>

<b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
‚Ä¢ ID –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
            """
            await query.edit_message_text(send_message_text, parse_mode='HTML', reply_markup=create_admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_main_menu())
            
    elif query.data == "admin_status":
        if is_admin(user_id):
            try:
                import psutil
                import platform
                
                cpu_percent = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                disk = psutil.disk_usage('/')
                
                status_message = f"""
üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>

üíª <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ OS: {platform.system()} {platform.release()}
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ RAM: {memory.percent}% ({memory.used // (1024**3)}GB / {memory.total // (1024**3)}GB)
‚Ä¢ Disk: {disk.percent}% ({disk.used // (1024**3)}GB / {disk.total // (1024**3)}GB)

üìä <b>–ë–æ—Ç:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%y %H:%M:%S')}
                """
                
                await query.edit_message_text(status_message, parse_mode='HTML', reply_markup=create_admin_menu())
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}", reply_markup=create_admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_main_menu())
            
    elif query.data == "admin_activate":
        if is_admin(user_id):
            activate_text = """
‚úÖ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/activate ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>/activate 123456789</code>
‚Ä¢ <code>/activate 987654321</code>

<b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
‚Ä¢ ID –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            """
            await query.edit_message_text(activate_text, parse_mode='HTML', reply_markup=create_admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_main_menu())
            
    elif query.data == "admin_deactivate":
        if is_admin(user_id):
            deactivate_text = """
üö´ <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/deactivate ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>/deactivate 123456789</code>
‚Ä¢ <code>/deactivate 987654321</code>

<b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
‚Ä¢ ID –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            """
            await query.edit_message_text(deactivate_text, parse_mode='HTML', reply_markup=create_admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_main_menu())
    
    # –£–±–∏—Ä–∞–µ–º callback –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
    if hasattr(context, 'processing_callbacks'):
        context.processing_callbacks.discard(query.id)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error = context.error
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏—è—Ö
    if "Message is not modified" in str(error):
        logger.info("‚ÑπÔ∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É 'Message is not modified' - –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏")
        return
    
    logger.error(f"–û—à–∏–±–∫–∞: {error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TG_TOKEN).build()
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram: {e}")
        raise
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_message))
    application.add_handler(CommandHandler("send", send_message_to_user))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_start", admin_start))
    application.add_handler(CommandHandler("admin_logs", admin_logs))
    application.add_handler(CommandHandler("admin_users", admin_users))
    application.add_handler(CommandHandler("admin_test", admin_test))
    application.add_handler(CommandHandler("admin_status", admin_status))
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("activate", activate_user_command))
    application.add_handler(CommandHandler("deactivate", deactivate_user_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –¥–∞—Ç–æ–π (admin_logs_DD_MM_YY)
    application.add_handler(MessageHandler(filters.Regex(r'^/admin_logs_\d{2}_\d{2}_\d{2}$'), admin_logs_date))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
