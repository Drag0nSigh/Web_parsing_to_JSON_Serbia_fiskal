#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import re
import logging
from datetime import datetime
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

from parser.fiscal_parser import parse_serbian_fiscal_url
from utils.timing_decorator import timing_decorator, async_timing_decorator
from db.utils import log_user_request, init_database
from .admin_commands import (
    admin_start, admin_logs, admin_logs_date, admin_users, 
    admin_test, admin_status, admin_stats, is_admin
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
log_dir = Path("log")
log_dir.mkdir(exist_ok=True)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TG_TOKEN = os.getenv('TG_TOKEN')
if not TG_TOKEN:
    raise ValueError("TG_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")

@timing_decorator
def is_url(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL"""
    url_pattern = re.compile(
        r'^https?://'  # http:// –∏–ª–∏ https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # –¥–æ–º–µ–Ω
        r'localhost|'  # localhost
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # IP
        r'(?::\d+)?'  # –ø–æ—Ä—Ç
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return bool(url_pattern.match(text.strip()))

@timing_decorator
def log_request(user_id: int, username: str, status: str = 'success', 
               error_message: str = None) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        log_user_request(
            user_id=user_id,
            username=username,
            status=status,
            error_message=error_message
        )
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        date_str = datetime.now().strftime("%Y-%m-%d")
        log_filename = f"requests_log_{date_str}.txt"
        log_file = log_dir / log_filename
        
        status_emoji = "‚úÖ" if status == 'success' else "‚ùå"
        log_entry = f"{timestamp} | ID: {user_id} | @{username} | {status_emoji} {status}\n"
        
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")

@async_timing_decorator
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n"
        "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–±—Å–∫–∏–π —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫, –∏ —è –≤–µ—Ä–Ω—É JSON –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
        "üîó –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏!\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:\n"
        "https://suf.purs.gov.rs/v/?vl=..."
    )

@async_timing_decorator
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑_username"
    message_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ URL
    if not is_url(message_text):
        await update.message.reply_text(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π!\n\n"
            "üîó –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–±—Å–∫–∏–µ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–µ —á–µ–∫–∏."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await update.message.reply_text(
        "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...\n"
        "üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
    )
    
    try:
        # –ü–∞—Ä—Å–∏–º URL —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ URL: {message_text}")
        result = parse_serbian_fiscal_url(message_text, headless=True)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
        log_request(
            user_id=user_id, 
            username=username, 
            status='success'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await processing_msg.edit_text(
            "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            "üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é JSON —Ñ–∞–π–ª..."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –∫–∞–∫ —Ñ–∞–π–ª
        json_text = json.dumps(result, ensure_ascii=False, indent=2)
        
        await update.message.reply_document(
            document=json_text.encode('utf-8'),
            filename=f"fiscal_data_{datetime.now().strftime('%d%m%y_%H-%M-%S')}.json",
            caption="üìÑ JSON –¥–∞–Ω–Ω—ã–µ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_request(
            user_id=user_id,
            username=username,
            status='error',
            error_message=str(e)
        )
        
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏:\n\n"
            f"üîç {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@async_timing_decorator
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@timing_decorator
def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if not init_database():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        logger.warning("‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤—ã–µ –ª–æ–≥–∏)")
    else:
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TG_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_start", admin_start))
    application.add_handler(CommandHandler("admin_logs", admin_logs))
    application.add_handler(CommandHandler("admin_users", admin_users))
    application.add_handler(CommandHandler("admin_test", admin_test))
    application.add_handler(CommandHandler("admin_status", admin_status))
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –¥–∞—Ç–æ–π (admin_logs_YYYY-MM-DD)
    application.add_handler(MessageHandler(filters.Regex(r'^/admin_logs_\d{4}-\d{2}-\d{2}$'), admin_logs_date))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
