"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –≤ bot_tg/telegram_bot.py
"""
import pytest
import os
from unittest.mock import Mock, patch, AsyncMock, MagicMock
from datetime import datetime

# –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
@pytest.fixture(autouse=True)
def mock_env_vars():
    """–ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    with patch.dict(os.environ, {
        'TG_TOKEN': '123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ',
        'ADMIN_ID': '123456789',
        'DAILY_REQUEST_LIMIT': '50'
    }):
        yield

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    # –ú–æ–∫–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
    with patch.dict(os.environ, {
        'TG_TOKEN': '123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ',
        'ADMIN_ID': '123456789',
        'DAILY_REQUEST_LIMIT': '50'
    }):
        from bot_tg.telegram_bot import (
            create_main_menu, create_admin_menu, button_callback, 
            error_handler, main, TG_TOKEN
        )
except ImportError as e:
    pytest.skip(f"Telegram bot module not available: {e}", allow_module_level=True)


class TestTelegramBotMenu:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é."""
    
    def test_create_main_menu(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        menu = create_main_menu()
        assert menu is not None
        assert hasattr(menu, 'inline_keyboard')
        assert len(menu.inline_keyboard) == 0  # –ü—É—Å—Ç–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    def test_create_admin_menu(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é."""
        menu = create_admin_menu()
        assert menu is not None
        assert hasattr(menu, 'inline_keyboard')
        assert len(menu.inline_keyboard) == 4  # 4 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        all_buttons = []
        for row in menu.inline_keyboard:
            for button in row:
                all_buttons.append(button.callback_data)
        
        expected_buttons = [
            "admin_logs", "admin_users", "admin_stats", "admin_test",
            "admin_send_message", "admin_status", "admin_activate", "admin_deactivate"
        ]
        
        for expected_button in expected_buttons:
            assert expected_button in all_buttons


class TestTelegramBotCallbacks:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫."""
    
    @pytest.fixture
    def mock_update(self):
        """–°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç update."""
        update = Mock()
        update.callback_query = Mock()
        update.callback_query.answer = AsyncMock()
        update.callback_query.edit_message_text = AsyncMock()
        update.callback_query.id = "test_callback_id"
        update.effective_user = Mock()
        update.effective_user.id = 123456789
        update.effective_user.username = "test_user"
        return update
    
    @pytest.fixture
    def mock_context(self):
        """–°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç context."""
        context = Mock()
        context.processing_callbacks = set()
        return context
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_logs_success(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ª–æ–≥–æ–≤ —Å —É—Å–ø–µ—à–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö."""
        mock_update.callback_query.data = "admin_logs"
        
        # –ú–æ–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with patch('db.utils.get_recent_logs') as mock_get_logs:
                mock_get_logs.return_value = [
                    {
                        'created_at': '2025-09-28 10:00:00',
                        'user_id': 123456789,
                        'username': 'test_user',
                        'status': 'success'
                    }
                ]
                
                await button_callback(mock_update, mock_context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–±—ç–∫ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω
                mock_update.callback_query.answer.assert_called_once()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
                mock_update.callback_query.edit_message_text.assert_called_once()
                call_args = mock_update.callback_query.edit_message_text.call_args
                assert "üìù" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ –ª–æ–≥–æ–≤
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_logs_no_data(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ª–æ–≥–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö."""
        mock_update.callback_query.data = "admin_logs"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            with patch('db.utils.get_recent_logs') as mock_get_logs:
                mock_get_logs.return_value = []
                
                await button_callback(mock_update, mock_context)
                
                mock_update.callback_query.edit_message_text.assert_called_once()
                call_args = mock_update.callback_query.edit_message_text.call_args
                assert "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" in call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_logs_not_admin(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞."""
        mock_update.callback_query.data = "admin_logs"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=False):
            await button_callback(mock_update, mock_context)
            
            mock_update.callback_query.edit_message_text.assert_called_once()
            call_args = mock_update.callback_query.edit_message_text.call_args
            assert "–Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" in call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_users_success(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å–ø–µ—à–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö."""
        mock_update.callback_query.data = "admin_users"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            with patch('db.utils.get_users_list') as mock_get_users:
                mock_get_users.return_value = [
                    {
                        'telegram_id': 123456789,
                        'username': 'test_user',
                        'is_active': True
                    }
                ]
                
                await button_callback(mock_update, mock_context)
                
                mock_update.callback_query.edit_message_text.assert_called_once()
                call_args = mock_update.callback_query.edit_message_text.call_args
                assert "üë•" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_stats_success(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É—Å–ø–µ—à–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö."""
        mock_update.callback_query.data = "admin_stats"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            with patch('db.utils.get_system_stats') as mock_get_stats:
                with patch('db.utils.get_database_info') as mock_get_db_info:
                    mock_get_stats.return_value = {
                        'total_requests': 100,
                        'successful_requests': 95,
                        'failed_requests': 5,
                        'unique_users': 10
                    }
                    mock_get_db_info.return_value = {
                        'users_count': 10,
                        'logs_count': 100,
                        'connection_status': 'connected'
                    }
                    
                    await button_callback(mock_update, mock_context)
                    
                    mock_update.callback_query.edit_message_text.assert_called_once()
                    call_args = mock_update.callback_query.edit_message_text.call_args
                        assert "üìä" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_test_success(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —É—Å–ø–µ—à–Ω—ã–º —Ç–µ—Å—Ç–æ–º –ø–∞—Ä—Å–µ—Ä–∞."""
        mock_update.callback_query.data = "admin_test"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            with patch('parser.fiscal_parser.parse_serbian_fiscal_url') as mock_parse:
                mock_parse.return_value = {"test": "data"}
                
                await button_callback(mock_update, mock_context)
                
                # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã: –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                assert mock_update.callback_query.edit_message_text.call_count == 2
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
                final_call = mock_update.callback_query.edit_message_text.call_args_list[-1]
                assert "‚úÖ" in final_call[0][0]  # –≠–º–æ–¥–∑–∏ —É—Å–ø–µ—Ö–∞
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_test_parser_error(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –ø–∞—Ä—Å–µ—Ä–∞."""
        mock_update.callback_query.data = "admin_test"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            with patch('parser.fiscal_parser.parse_serbian_fiscal_url') as mock_parse:
                mock_parse.side_effect = Exception("Parser error")
                
                await button_callback(mock_update, mock_context)
                
                # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã: –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                assert mock_update.callback_query.edit_message_text.call_count == 2
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—à–∏–±–∫–∏
                final_call = mock_update.callback_query.edit_message_text.call_args_list[-1]
                assert "‚ùå" in final_call[0][0]  # –≠–º–æ–¥–∑–∏ –æ—à–∏–±–∫–∏
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_send_message(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        mock_update.callback_query.data = "admin_send_message"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            await button_callback(mock_update, mock_context)
            
            mock_update.callback_query.edit_message_text.assert_called_once()
            call_args = mock_update.callback_query.edit_message_text.call_args
            assert "üì®" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_status_success(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å —É—Å–ø–µ—à–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ."""
        mock_update.callback_query.data = "admin_status"
        
        # –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª–∏ psutil –∏ platform –¥–ª—è admin_status
        mock_psutil = Mock()
        mock_psutil.cpu_percent.return_value = 25.5
        mock_psutil.virtual_memory.return_value = Mock(percent=60, used=8*1024**3, total=16*1024**3)
        mock_psutil.disk_usage.return_value = Mock(percent=45, used=200*1024**3, total=500*1024**3)
        
        mock_platform = Mock()
        mock_platform.system.return_value = "Windows"
        mock_platform.release.return_value = "10"
        
        mock_log_manager = Mock()
        mock_log_manager.get_log_stats.return_value = {
            'total_files': 15,
            'total_size': 2560,
            'retention_days': 30
        }
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            with patch.dict('sys.modules', {'psutil': mock_psutil, 'platform': mock_platform}):
                with patch('utils.log_manager.get_log_manager', return_value=mock_log_manager):
                    with patch('bot_tg.admin_commands.datetime') as mock_datetime:
                        mock_datetime.now.return_value.strftime.return_value = "28.09.25 15:00:00"
                        
                        await button_callback(mock_update, mock_context)
                        
                        mock_update.callback_query.edit_message_text.assert_called_once()
                        call_args = mock_update.callback_query.edit_message_text.call_args
                        assert "üñ•Ô∏è" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ —Å–∏—Å—Ç–µ–º—ã
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_activate(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."""
        mock_update.callback_query.data = "admin_activate"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            await button_callback(mock_update, mock_context)
            
            mock_update.callback_query.edit_message_text.assert_called_once()
            call_args = mock_update.callback_query.edit_message_text.call_args
            assert "‚úÖ" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    
    @pytest.mark.asyncio
    async def test_button_callback_admin_deactivate(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏."""
        mock_update.callback_query.data = "admin_deactivate"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            await button_callback(mock_update, mock_context)
            
            mock_update.callback_query.edit_message_text.assert_called_once()
            call_args = mock_update.callback_query.edit_message_text.call_args
            assert "üö´" in call_args[0][0]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    
    @pytest.mark.asyncio
    async def test_button_callback_unknown_data(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        mock_update.callback_query.data = "unknown_callback"
        
        await button_callback(mock_update, mock_context)
        
        # –î–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        mock_update.callback_query.answer.assert_called_once()
        mock_update.callback_query.edit_message_text.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_button_callback_processing_callbacks_tracking(self, mock_update, mock_context):
        """–¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∫–æ–ª–±—ç–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è."""
        mock_update.callback_query.data = "admin_logs"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            with patch('db.utils.get_recent_logs') as mock_get_logs:
                mock_get_logs.return_value = []
                
                await button_callback(mock_update, mock_context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –∫–æ–ª–±—ç–∫–∞ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –Ω–∞–±–æ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                assert mock_update.callback_query.id not in mock_context.processing_callbacks


class TestTelegramBotErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫."""
    
    @pytest.mark.asyncio
    async def test_error_handler_message_not_modified(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É 'Message is not modified'."""
        update = Mock()
        context = Mock()
        context.error = Exception("Message is not modified")
        
        with patch('bot_tg.telegram_bot.logger') as mock_logger:
            await error_handler(update, context)
            
            # –î–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—à–∏–±–∫–∏
            mock_logger.info.assert_called_once()
            assert "Message is not modified" in mock_logger.info.call_args[0][0]
    
    @pytest.mark.asyncio
    async def test_error_handler_general_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫."""
        update = Mock()
        update.effective_message = Mock()
        update.effective_message.reply_text = AsyncMock()
        context = Mock()
        context.error = Exception("General error")
        
        with patch('bot_tg.telegram_bot.logger') as mock_logger:
            await error_handler(update, context)
            
            # –î–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
            mock_logger.error.assert_called_once()
            
            # –î–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            update.effective_message.reply_text.assert_called_once()
            call_args = update.effective_message.reply_text.call_args[0][0]
            assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞" in call_args
    
    @pytest.mark.asyncio
    async def test_error_handler_no_effective_message(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–≥–¥–∞ –Ω–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        update = Mock()
        update.effective_message = None
        context = Mock()
        context.error = Exception("General error")
        
        with patch('bot_tg.telegram_bot.logger') as mock_logger:
            await error_handler(update, context)
            
            # –î–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
            mock_logger.error.assert_called_once()
            
            # –ù–µ –¥–æ–ª–∂–µ–Ω –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            # (–≠—Ç–æ —Ç–µ–∫—É—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–æ)


class TestTelegramBotMain:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
    
    def test_tg_token_validation(self):
        """–¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ TG_TOKEN –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è."""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ
        assert TG_TOKEN is not None
        assert ':' in TG_TOKEN  # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "BOT_ID:TOKEN"
    
    @patch('bot_tg.telegram_bot.init_database')
    @patch('bot_tg.telegram_bot.Application')
    @patch('bot_tg.telegram_bot.logger')
    def test_main_success(self, mock_logger, mock_app_class, mock_init_db):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
        # –ú–æ–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        mock_app = Mock()
        mock_app_class.builder.return_value.token.return_value.build.return_value = mock_app
        
        # –ú–æ–∫–∞–µ–º init_database —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        mock_init_db.return_value = None
        
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ –±—ã –±–æ—Ç–∞, –Ω–æ –º—ã –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        try:
            main()
        except SystemExit:
            # –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è run_polling
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        mock_init_db.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
        mock_app_class.builder.assert_called_once()
    
    @patch('bot_tg.telegram_bot.init_database')
    @patch('bot_tg.telegram_bot.logger')
    def test_main_database_error(self, mock_logger, mock_init_db):
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        # –ú–æ–∫–∞–µ–º init_database —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        mock_init_db.side_effect = Exception("Database error")
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ä–∞–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = main()
        assert result is None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
        mock_logger.error.assert_called_once()
        assert "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î" in mock_logger.error.call_args[0][0]
    
    @patch('bot_tg.telegram_bot.init_database')
    @patch('bot_tg.telegram_bot.Application')
    @patch('bot_tg.telegram_bot.logger')
    def test_main_application_error(self, mock_logger, mock_app_class, mock_init_db):
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –ú–æ–∫–∞–µ–º init_database —á—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
        mock_init_db.return_value = None
        
        # –ú–æ–∫–∞–µ–º Application —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        mock_app_class.builder.return_value.token.return_value.build.side_effect = Exception("App error")
        
        # –î–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with pytest.raises(Exception, match="App error"):
            main()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
        mock_logger.error.assert_called_once()
        assert "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram" in mock_logger.error.call_args[0][0]


class TestTelegramBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞."""
    
    @pytest.mark.asyncio
    async def test_full_callback_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞."""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = Mock()
        update.callback_query = Mock()
        update.callback_query.answer = AsyncMock()
        update.callback_query.edit_message_text = AsyncMock()
        update.callback_query.id = "test_callback_id"
        update.effective_user = Mock()
        update.effective_user.id = 123456789
        update.effective_user.username = "test_user"
        
        context = Mock()
        context.processing_callbacks = set()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ª–æ–≥–æ–≤
        update.callback_query.data = "admin_logs"
        
        with patch('bot_tg.telegram_bot.is_admin', return_value=True):
            with patch('db.utils.get_recent_logs') as mock_get_logs:
                mock_get_logs.return_value = [
                    {
                        'created_at': '2025-09-28 10:00:00',
                        'user_id': 123456789,
                        'username': 'test_user',
                        'status': 'success'
                    }
                ]
                
                await button_callback(update, context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –≤—ã–∑–æ–≤—ã –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã
                update.callback_query.answer.assert_called_once()
                update.callback_query.edit_message_text.assert_called_once()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–±—ç–∫ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–µ–Ω
                assert update.callback_query.id not in context.processing_callbacks
    
    def test_menu_creation_consistency(self):
        """–¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã."""
        main_menu = create_main_menu()
        admin_menu = create_admin_menu()
        
        # –û–±–∞ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã InlineKeyboardMarkup
        assert hasattr(main_menu, 'inline_keyboard')
        assert hasattr(admin_menu, 'inline_keyboard')
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        assert len(main_menu.inline_keyboard) == 0
        
        # –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫–∏
        assert len(admin_menu.inline_keyboard) > 0
        
        # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        for row in admin_menu.inline_keyboard:
            for button in row:
                assert hasattr(button, 'text')
                assert hasattr(button, 'callback_data')
                assert button.text is not None
                assert button.callback_data is not None
